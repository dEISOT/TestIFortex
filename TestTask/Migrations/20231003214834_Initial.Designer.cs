// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.Data;

#nullable disable

namespace TestTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231003214834_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be4bca81-26eb-4f73-80d8-050a0f00e462"),
                            Price = 10,
                            ProductName = "Apple",
                            Quantity = 5,
                            UserId = new Guid("a2fcd44b-7df6-419c-99b9-bdb5aea75ad2")
                        },
                        new
                        {
                            Id = new Guid("97987e49-9b75-437c-9f74-a49568a6e5a2"),
                            Price = 30,
                            ProductName = "Lemon",
                            Quantity = 2,
                            UserId = new Guid("a2fcd44b-7df6-419c-99b9-bdb5aea75ad2")
                        },
                        new
                        {
                            Id = new Guid("7706c658-9fb7-4375-b3de-9c349e761437"),
                            Price = 5,
                            ProductName = "Cucumber",
                            Quantity = 10,
                            UserId = new Guid("a2fcd44b-7df6-419c-99b9-bdb5aea75ad2")
                        },
                        new
                        {
                            Id = new Guid("b5dffd13-6400-4fa5-aa89-b5d0274d7dd2"),
                            Price = 7,
                            ProductName = "Cabbage",
                            Quantity = 2,
                            UserId = new Guid("509292e2-aa85-4977-9c91-60a849acf23b")
                        },
                        new
                        {
                            Id = new Guid("1d346b54-ba28-411d-ae93-a851e583f418"),
                            Price = 8,
                            ProductName = "Onion",
                            Quantity = 6,
                            UserId = new Guid("509292e2-aa85-4977-9c91-60a849acf23b")
                        },
                        new
                        {
                            Id = new Guid("f473dea9-aefc-4a23-9ad3-a3d179b1151c"),
                            Price = 9,
                            ProductName = "Carrot",
                            Quantity = 5,
                            UserId = new Guid("509292e2-aa85-4977-9c91-60a849acf23b")
                        },
                        new
                        {
                            Id = new Guid("e4a8ebaa-6a9f-4410-a770-60bd5839415e"),
                            Price = 40,
                            ProductName = "Mango",
                            Quantity = 2,
                            UserId = new Guid("dca86a0f-b7fb-4e02-92a5-95fdae5c655c")
                        },
                        new
                        {
                            Id = new Guid("5950adf8-9e8c-4066-8550-7648608c3e90"),
                            Price = 45,
                            ProductName = "Orange",
                            Quantity = 5,
                            UserId = new Guid("1fe9ba06-5604-4935-9f65-eaa9b7008bee")
                        },
                        new
                        {
                            Id = new Guid("f8643ac7-c557-4ea6-8862-380693910545"),
                            Price = 100,
                            ProductName = "Watermelon",
                            Quantity = 1,
                            UserId = new Guid("1fe9ba06-5604-4935-9f65-eaa9b7008bee")
                        },
                        new
                        {
                            Id = new Guid("07b58f5d-bd6c-43f5-8041-a0aac4c2324b"),
                            Price = 8,
                            ProductName = "Garlic",
                            Quantity = 12,
                            UserId = new Guid("1fe9ba06-5604-4935-9f65-eaa9b7008bee")
                        },
                        new
                        {
                            Id = new Guid("73163c07-59af-490a-8733-9e8be6e8f4f6"),
                            Price = 3,
                            ProductName = "Potato",
                            Quantity = 100,
                            UserId = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a")
                        },
                        new
                        {
                            Id = new Guid("355a4e55-de3e-4141-9755-ebab3d3dda81"),
                            Price = 9,
                            ProductName = "Carrot",
                            Quantity = 15,
                            UserId = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a")
                        },
                        new
                        {
                            Id = new Guid("e40378ea-ee33-48c6-b41a-b1cc1c310a65"),
                            Price = 8,
                            ProductName = "Onion",
                            Quantity = 15,
                            UserId = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a")
                        },
                        new
                        {
                            Id = new Guid("f5a6d42e-6770-4b60-8335-6c73fa89bf52"),
                            Price = 50,
                            ProductName = "Pumpkin",
                            Quantity = 1,
                            UserId = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a")
                        },
                        new
                        {
                            Id = new Guid("db86c26d-4b8f-407c-9548-b4a165a7ef43"),
                            Price = 100,
                            ProductName = "Watermelon",
                            Quantity = 12,
                            UserId = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a")
                        });
                });

            modelBuilder.Entity("TestTask.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2fcd44b-7df6-419c-99b9-bdb5aea75ad2"),
                            Email = "user1@gmail.com",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("509292e2-aa85-4977-9c91-60a849acf23b"),
                            Email = "user2@gmail.com",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("dca86a0f-b7fb-4e02-92a5-95fdae5c655c"),
                            Email = "user3@gmail.com",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1fe9ba06-5604-4935-9f65-eaa9b7008bee"),
                            Email = "user4@gmail.com",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("06fc7431-b349-40e5-a164-731cae812f66"),
                            Email = "user5@gmail.com",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5178b392-f04e-43c6-978f-97504131bf3f"),
                            Email = "user6@gmail.com",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0034123f-b24f-4ff4-9eba-4bb716ccf55a"),
                            Email = "user7@gmail.com",
                            Status = 0
                        });
                });

            modelBuilder.Entity("TestTask.Models.Order", b =>
                {
                    b.HasOne("TestTask.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
